@page "/user/edit"
@using AutoMapper
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<h3>Edit</h3>


<div class="mb-4">Your group: @(GroupId?.ToString() ?? "None")</div>
<EditForm Model="UserEdit" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <ErrorMessage Message="@PutErrorMessage"/>
    <TextInputField Type="password" @bind-Value="UserEdit.Password" Label="New Password" ValidationFor="@(() => UserEdit.Password)"/>
    <SubmitButton IsValid="context.Validate()">Update</SubmitButton>
</EditForm>

@code {
    private UserEditDto UserEdit { get; } = new();
    private string? PutErrorMessage { get; set; }
    private int? GroupId { get; set; }

    [Inject]
    public required IMapper Mapper { get; init; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateTask;
        GroupId = authState.User.GetGroup();
    }

    private async Task HandleSubmit()
    {
        var response = await AccountService.ChangePasswordAsync(UserEdit);

        if (response.IsSuccess)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            PutErrorMessage = response.Message;
        }
    }

}